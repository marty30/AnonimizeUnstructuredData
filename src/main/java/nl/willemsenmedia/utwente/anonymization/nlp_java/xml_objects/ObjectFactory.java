//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.03.22 at 01:30:51 PM CET 
//


package nl.willemsenmedia.utwente.anonymization.nlp_java.xml_objects;

import javax.xml.bind.annotation.XmlRegistry;


/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the nl.willemsenmedia.utwente.anonymization.nlp_java.xml_objects package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {


	/**
	 * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: nl.willemsenmedia.utwente.anonymization.nlp_java.xml_objects
	 */
	public ObjectFactory() {
	}

	/**
	 * Create an instance of {@link MorphoSyntax }
	 */
	public MorphoSyntax createMorphoSyntax() {
		return new MorphoSyntax();
	}

	/**
	 * Create an instance of {@link Auxiliaries }
	 */
	public Auxiliaries createAuxiliaries() {
		return new Auxiliaries();
	}

	/**
	 * Create an instance of {@link Meta }
	 */
	public Meta createMeta() {
		return new Meta();
	}

	/**
	 * Create an instance of {@link MonolingualExternalRef }
	 */
	public MonolingualExternalRef createMonolingualExternalRef() {
		return new MonolingualExternalRef();
	}

	/**
	 * Create an instance of {@link Synset }
	 */
	public Synset createSynset() {
		return new Synset();
	}

	/**
	 * Create an instance of {@link Definitions }
	 */
	public Definitions createDefinitions() {
		return new Definitions();
	}

	/**
	 * Create an instance of {@link Definition }
	 */
	public Definition createDefinition() {
		return new Definition();
	}

	/**
	 * Create an instance of {@link SynsetRelations }
	 */
	public SynsetRelations createSynsetRelations() {
		return new SynsetRelations();
	}

	/**
	 * Create an instance of {@link SynsetRelation }
	 */
	public SynsetRelation createSynsetRelation() {
		return new SynsetRelation();
	}

	/**
	 * Create an instance of {@link MonolingualExternalRefs }
	 */
	public MonolingualExternalRefs createMonolingualExternalRefs() {
		return new MonolingualExternalRefs();
	}

	/**
	 * Create an instance of {@link Lexicon }
	 */
	public Lexicon createLexicon() {
		return new Lexicon();
	}

	/**
	 * Create an instance of {@link LexicalEntry }
	 */
	public LexicalEntry createLexicalEntry() {
		return new LexicalEntry();
	}

	/**
	 * Create an instance of {@link Lemma }
	 */
	public Lemma createLemma() {
		return new Lemma();
	}

	/**
	 * Create an instance of {@link WordForms }
	 */
	public WordForms createWordForms() {
		return new WordForms();
	}

	/**
	 * Create an instance of {@link WordForm }
	 */
	public WordForm createWordForm() {
		return new WordForm();
	}

	/**
	 * Create an instance of {@link MultiwordExpression }
	 */
	public MultiwordExpression createMultiwordExpression() {
		return new MultiwordExpression();
	}

	/**
	 * Create an instance of {@link RelatedForms }
	 */
	public RelatedForms createRelatedForms() {
		return new RelatedForms();
	}

	/**
	 * Create an instance of {@link RelatedForm }
	 */
	public RelatedForm createRelatedForm() {
		return new RelatedForm();
	}

	/**
	 * Create an instance of {@link Morphology }
	 */
	public Morphology createMorphology() {
		return new Morphology();
	}

	/**
	 * Create an instance of {@link SyntacticBehaviour }
	 */
	public SyntacticBehaviour createSyntacticBehaviour() {
		return new SyntacticBehaviour();
	}

	/**
	 * Create an instance of {@link Complementation }
	 */
	public Complementation createComplementation() {
		return new Complementation();
	}

	/**
	 * Create an instance of {@link SyntacticSubcategorisationFrame }
	 */
	public SyntacticSubcategorisationFrame createSyntacticSubcategorisationFrame() {
		return new SyntacticSubcategorisationFrame();
	}

	/**
	 * Create an instance of {@link SyntacticArgument }
	 */
	public SyntacticArgument createSyntacticArgument() {
		return new SyntacticArgument();
	}

	/**
	 * Create an instance of {@link Sense }
	 */
	public Sense createSense() {
		return new Sense();
	}

	/**
	 * Create an instance of {@link Sentiment }
	 */
	public Sentiment createSentiment() {
		return new Sentiment();
	}

	/**
	 * Create an instance of {@link Pragmatics }
	 */
	public Pragmatics createPragmatics() {
		return new Pragmatics();
	}

	/**
	 * Create an instance of {@link Domains }
	 */
	public Domains createDomains() {
		return new Domains();
	}

	/**
	 * Create an instance of {@link SemanticsVerb }
	 */
	public SemanticsVerb createSemanticsVerb() {
		return new SemanticsVerb();
	}

	/**
	 * Create an instance of {@link SemanticTypes }
	 */
	public SemanticTypes createSemanticTypes() {
		return new SemanticTypes();
	}

	/**
	 * Create an instance of {@link SemanticsNoun }
	 */
	public SemanticsNoun createSemanticsNoun() {
		return new SemanticsNoun();
	}

	/**
	 * Create an instance of {@link SemanticShiftsNoun }
	 */
	public SemanticShiftsNoun createSemanticShiftsNoun() {
		return new SemanticShiftsNoun();
	}

	/**
	 * Create an instance of {@link SemanticsAdjective }
	 */
	public SemanticsAdjective createSemanticsAdjective() {
		return new SemanticsAdjective();
	}

	/**
	 * Create an instance of {@link SemanticShiftsAdjective }
	 */
	public SemanticShiftsAdjective createSemanticShiftsAdjective() {
		return new SemanticShiftsAdjective();
	}

	/**
	 * Create an instance of {@link SenseExamples }
	 */
	public SenseExamples createSenseExamples() {
		return new SenseExamples();
	}

	/**
	 * Create an instance of {@link SenseExample }
	 */
	public SenseExample createSenseExample() {
		return new SenseExample();
	}

	/**
	 * Create an instance of {@link CanonicalForm }
	 */
	public CanonicalForm createCanonicalForm() {
		return new CanonicalForm();
	}

	/**
	 * Create an instance of {@link SemanticsEx }
	 */
	public SemanticsEx createSemanticsEx() {
		return new SemanticsEx();
	}

	/**
	 * Create an instance of {@link LexCollocator }
	 */
	public LexCollocator createLexCollocator() {
		return new LexCollocator();
	}

	/**
	 * Create an instance of {@link SyntaxEx }
	 */
	public SyntaxEx createSyntaxEx() {
		return new SyntaxEx();
	}

	/**
	 * Create an instance of {@link CombiWord }
	 */
	public CombiWord createCombiWord() {
		return new CombiWord();
	}

	/**
	 * Create an instance of {@link TextualForm }
	 */
	public TextualForm createTextualForm() {
		return new TextualForm();
	}

	/**
	 * Create an instance of {@link SenseRelations }
	 */
	public SenseRelations createSenseRelations() {
		return new SenseRelations();
	}

	/**
	 * Create an instance of {@link SenseGroup }
	 */
	public SenseGroup createSenseGroup() {
		return new SenseGroup();
	}

	/**
	 * Create an instance of {@link LexicalResource }
	 */
	public LexicalResource createLexicalResource() {
		return new LexicalResource();
	}

	/**
	 * Create an instance of {@link GlobalInformation }
	 */
	public GlobalInformation createGlobalInformation() {
		return new GlobalInformation();
	}

}
